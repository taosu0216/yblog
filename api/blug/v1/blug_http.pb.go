// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.2
// - protoc             v3.20.3
// source: blug/v1/blug.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBlugCreateNewFriendLink = "/blug.v1.Blug/CreateNewFriendLink"
const OperationBlugGetArticleByTitle = "/blug.v1.Blug/GetArticleByTitle"
const OperationBlugGetArticleList = "/blug.v1.Blug/GetArticleList"
const OperationBlugGetFriendLinkList = "/blug.v1.Blug/GetFriendLinkList"
const OperationBlugRegisterUser = "/blug.v1.Blug/RegisterUser"
const OperationBlugUserList = "/blug.v1.Blug/UserList"
const OperationBlugUserLogin = "/blug.v1.Blug/UserLogin"

type BlugHTTPServer interface {
	// CreateNewFriendLink Friend service
	CreateNewFriendLink(context.Context, *CreateNewFriendLinkReq) (*CreateNewFriendLinkResp, error)
	GetArticleByTitle(context.Context, *GetArticleByTitleReq) (*GetArticleByTitleResp, error)
	// GetArticleList Article service
	GetArticleList(context.Context, *GetArticleListReq) (*GetArticleListResp, error)
	GetFriendLinkList(context.Context, *GetFriendLinkListReq) (*GetFriendLinkListResp, error)
	// RegisterUser User service
	RegisterUser(context.Context, *RegisterUserReq) (*RegisterUserResp, error)
	UserList(context.Context, *UserListReq) (*UserListResp, error)
	UserLogin(context.Context, *UserLoginReq) (*UserLoginResp, error)
}

func RegisterBlugHTTPServer(s *http.Server, srv BlugHTTPServer) {
	r := s.Route("/")
	r.POST("/api/friends/add", _Blug_CreateNewFriendLink0_HTTP_Handler(srv))
	r.GET("/api/friends/list", _Blug_GetFriendLinkList0_HTTP_Handler(srv))
	r.POST("/api/user/register", _Blug_RegisterUser0_HTTP_Handler(srv))
	r.POST("/api/user/login", _Blug_UserLogin0_HTTP_Handler(srv))
	r.POST("/api/user/lists", _Blug_UserList0_HTTP_Handler(srv))
	r.GET("/api/article/list", _Blug_GetArticleList0_HTTP_Handler(srv))
	r.GET("/api/article/get", _Blug_GetArticleByTitle0_HTTP_Handler(srv))
}

func _Blug_CreateNewFriendLink0_HTTP_Handler(srv BlugHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateNewFriendLinkReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlugCreateNewFriendLink)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateNewFriendLink(ctx, req.(*CreateNewFriendLinkReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateNewFriendLinkResp)
		return ctx.Result(200, reply)
	}
}

func _Blug_GetFriendLinkList0_HTTP_Handler(srv BlugHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetFriendLinkListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlugGetFriendLinkList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetFriendLinkList(ctx, req.(*GetFriendLinkListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetFriendLinkListResp)
		return ctx.Result(200, reply)
	}
}

func _Blug_RegisterUser0_HTTP_Handler(srv BlugHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterUserReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlugRegisterUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RegisterUser(ctx, req.(*RegisterUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterUserResp)
		return ctx.Result(200, reply)
	}
}

func _Blug_UserLogin0_HTTP_Handler(srv BlugHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserLoginReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlugUserLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserLogin(ctx, req.(*UserLoginReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserLoginResp)
		return ctx.Result(200, reply)
	}
}

func _Blug_UserList0_HTTP_Handler(srv BlugHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlugUserList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserList(ctx, req.(*UserListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserListResp)
		return ctx.Result(200, reply)
	}
}

func _Blug_GetArticleList0_HTTP_Handler(srv BlugHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetArticleListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlugGetArticleList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetArticleList(ctx, req.(*GetArticleListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetArticleListResp)
		return ctx.Result(200, reply)
	}
}

func _Blug_GetArticleByTitle0_HTTP_Handler(srv BlugHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetArticleByTitleReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlugGetArticleByTitle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetArticleByTitle(ctx, req.(*GetArticleByTitleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetArticleByTitleResp)
		return ctx.Result(200, reply)
	}
}

type BlugHTTPClient interface {
	CreateNewFriendLink(ctx context.Context, req *CreateNewFriendLinkReq, opts ...http.CallOption) (rsp *CreateNewFriendLinkResp, err error)
	GetArticleByTitle(ctx context.Context, req *GetArticleByTitleReq, opts ...http.CallOption) (rsp *GetArticleByTitleResp, err error)
	GetArticleList(ctx context.Context, req *GetArticleListReq, opts ...http.CallOption) (rsp *GetArticleListResp, err error)
	GetFriendLinkList(ctx context.Context, req *GetFriendLinkListReq, opts ...http.CallOption) (rsp *GetFriendLinkListResp, err error)
	RegisterUser(ctx context.Context, req *RegisterUserReq, opts ...http.CallOption) (rsp *RegisterUserResp, err error)
	UserList(ctx context.Context, req *UserListReq, opts ...http.CallOption) (rsp *UserListResp, err error)
	UserLogin(ctx context.Context, req *UserLoginReq, opts ...http.CallOption) (rsp *UserLoginResp, err error)
}

type BlugHTTPClientImpl struct {
	cc *http.Client
}

func NewBlugHTTPClient(client *http.Client) BlugHTTPClient {
	return &BlugHTTPClientImpl{client}
}

func (c *BlugHTTPClientImpl) CreateNewFriendLink(ctx context.Context, in *CreateNewFriendLinkReq, opts ...http.CallOption) (*CreateNewFriendLinkResp, error) {
	var out CreateNewFriendLinkResp
	pattern := "/api/friends/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBlugCreateNewFriendLink))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BlugHTTPClientImpl) GetArticleByTitle(ctx context.Context, in *GetArticleByTitleReq, opts ...http.CallOption) (*GetArticleByTitleResp, error) {
	var out GetArticleByTitleResp
	pattern := "/api/article/get"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBlugGetArticleByTitle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BlugHTTPClientImpl) GetArticleList(ctx context.Context, in *GetArticleListReq, opts ...http.CallOption) (*GetArticleListResp, error) {
	var out GetArticleListResp
	pattern := "/api/article/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBlugGetArticleList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BlugHTTPClientImpl) GetFriendLinkList(ctx context.Context, in *GetFriendLinkListReq, opts ...http.CallOption) (*GetFriendLinkListResp, error) {
	var out GetFriendLinkListResp
	pattern := "/api/friends/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBlugGetFriendLinkList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BlugHTTPClientImpl) RegisterUser(ctx context.Context, in *RegisterUserReq, opts ...http.CallOption) (*RegisterUserResp, error) {
	var out RegisterUserResp
	pattern := "/api/user/register"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBlugRegisterUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BlugHTTPClientImpl) UserList(ctx context.Context, in *UserListReq, opts ...http.CallOption) (*UserListResp, error) {
	var out UserListResp
	pattern := "/api/user/lists"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBlugUserList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BlugHTTPClientImpl) UserLogin(ctx context.Context, in *UserLoginReq, opts ...http.CallOption) (*UserLoginResp, error) {
	var out UserLoginResp
	pattern := "/api/user/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBlugUserLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
