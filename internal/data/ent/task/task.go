// Code generated by ent, DO NOT EDIT.

package task

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the task type in the database.
	Label = "task"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTaskID holds the string denoting the task_id field in the database.
	FieldTaskID = "task_id"
	// FieldTaskName holds the string denoting the task_name field in the database.
	FieldTaskName = "task_name"
	// FieldTaskType holds the string denoting the task_type field in the database.
	FieldTaskType = "task_type"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldReason holds the string denoting the reason field in the database.
	FieldReason = "reason"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldFinishTime holds the string denoting the finish_time field in the database.
	FieldFinishTime = "finish_time"
	// FieldRetry holds the string denoting the retry field in the database.
	FieldRetry = "retry"
	// Table holds the table name of the task in the database.
	Table = "tasks"
)

// Columns holds all SQL columns for task fields.
var Columns = []string{
	FieldID,
	FieldTaskID,
	FieldTaskName,
	FieldTaskType,
	FieldStatus,
	FieldReason,
	FieldCreateTime,
	FieldFinishTime,
	FieldRetry,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultTaskID holds the default value on creation for the "task_id" field.
	DefaultTaskID string
	// DefaultTaskName holds the default value on creation for the "task_name" field.
	DefaultTaskName string
	// DefaultTaskType holds the default value on creation for the "task_type" field.
	DefaultTaskType string
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// DefaultReason holds the default value on creation for the "reason" field.
	DefaultReason string
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime string
	// DefaultFinishTime holds the default value on creation for the "finish_time" field.
	DefaultFinishTime string
	// DefaultRetry holds the default value on creation for the "retry" field.
	DefaultRetry int
)

// OrderOption defines the ordering options for the Task queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTaskID orders the results by the task_id field.
func ByTaskID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaskID, opts...).ToFunc()
}

// ByTaskName orders the results by the task_name field.
func ByTaskName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaskName, opts...).ToFunc()
}

// ByTaskType orders the results by the task_type field.
func ByTaskType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaskType, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByReason orders the results by the reason field.
func ByReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReason, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByFinishTime orders the results by the finish_time field.
func ByFinishTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFinishTime, opts...).ToFunc()
}

// ByRetry orders the results by the retry field.
func ByRetry(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRetry, opts...).ToFunc()
}
