// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blug/internal/data/ent/friend"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Friend is the model entity for the Friend schema.
type Friend struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Title holds the value of the "Title" field.
	Title string `json:"Title,omitempty"`
	// Desc holds the value of the "Desc" field.
	Desc string `json:"Desc,omitempty"`
	// Link holds the value of the "Link" field.
	Link string `json:"Link,omitempty"`
	// Avatar holds the value of the "Avatar" field.
	Avatar string `json:"Avatar,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime   time.Time `json:"create_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Friend) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case friend.FieldTitle, friend.FieldDesc, friend.FieldLink, friend.FieldAvatar:
			values[i] = new(sql.NullString)
		case friend.FieldCreateTime:
			values[i] = new(sql.NullTime)
		case friend.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Friend fields.
func (f *Friend) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case friend.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				f.ID = *value
			}
		case friend.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Title", values[i])
			} else if value.Valid {
				f.Title = value.String
			}
		case friend.FieldDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Desc", values[i])
			} else if value.Valid {
				f.Desc = value.String
			}
		case friend.FieldLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Link", values[i])
			} else if value.Valid {
				f.Link = value.String
			}
		case friend.FieldAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Avatar", values[i])
			} else if value.Valid {
				f.Avatar = value.String
			}
		case friend.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				f.CreateTime = value.Time
			}
		default:
			f.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Friend.
// This includes values selected through modifiers, order, etc.
func (f *Friend) Value(name string) (ent.Value, error) {
	return f.selectValues.Get(name)
}

// Update returns a builder for updating this Friend.
// Note that you need to call Friend.Unwrap() before calling this method if this Friend
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Friend) Update() *FriendUpdateOne {
	return NewFriendClient(f.config).UpdateOne(f)
}

// Unwrap unwraps the Friend entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Friend) Unwrap() *Friend {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Friend is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Friend) String() string {
	var builder strings.Builder
	builder.WriteString("Friend(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("Title=")
	builder.WriteString(f.Title)
	builder.WriteString(", ")
	builder.WriteString("Desc=")
	builder.WriteString(f.Desc)
	builder.WriteString(", ")
	builder.WriteString("Link=")
	builder.WriteString(f.Link)
	builder.WriteString(", ")
	builder.WriteString("Avatar=")
	builder.WriteString(f.Avatar)
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(f.CreateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Friends is a parsable slice of Friend.
type Friends []*Friend
